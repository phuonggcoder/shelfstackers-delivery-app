import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { useRouter } from 'expo-router';
import * as React from 'react';
import {
  ActivityIndicator,
  Alert,
  Image,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import EmailOTPVerification from './EmailOTPVerification';
const { useState } = React;

interface RegisterFormData {
  email: string;
  password: string;
  confirmPassword: string;
  full_name: string;
  phone_number: string;
}

export default function RegisterScreen() {
  const router = useRouter();
  const [formData, setFormData] = useState<RegisterFormData>({
    email: '',
    password: '',
    confirmPassword: '',
    full_name: '',
    phone_number: '',
  });
  
  const [errors, setErrors] = useState<Partial<RegisterFormData>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [showOTP, setShowOTP] = useState(false);
  const [registeredUser, setRegisteredUser] = useState<any>(null);

  const handleChange = (field: keyof RegisterFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = () => {
    const newErrors: Partial<RegisterFormData> = {};

    if (!formData.email.trim()) {
      newErrors.email = 'Email l√† b·∫Øt bu·ªôc';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }

    if (!formData.password) {
      newErrors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }

    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'X√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp';
    }

    if (!formData.full_name.trim()) {
      newErrors.full_name = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
    }

    if (!formData.phone_number.trim()) {
      newErrors.phone_number = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    } else if (!/^[0-9]{10,11}$/.test(formData.phone_number)) {
      newErrors.phone_number = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleRegister = async () => {
    if (!validateForm()) return;

    setIsLoading(true);

    try {
      const registrationData = {
        email: formData.email.toLowerCase(),
        password: formData.password,
        full_name: formData.full_name,
        phone_number: formData.phone_number,
        roles: ['shipper'],
      };

      const response = await fetch('https://server-shelf-stacker-w1ds.onrender.com/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(registrationData),
      });

      const data = await response.json();
      console.log('Registration response:', data);
      console.log('Response status:', response.status);
      console.log('Response ok:', response.ok);
      console.log('Data user:', data.user);
      console.log('Data requiresVerification:', data.requiresVerification);

      // Debug chi ti·∫øt
      console.log('=== DEBUG REGISTRATION ===');
      console.log('Response status:', response.status);
      console.log('Response ok:', response.ok);
      console.log('Data:', JSON.stringify(data, null, 2));
      console.log('Has user:', !!data.user);
      console.log('Has requiresVerification:', !!data.requiresVerification);
      console.log('Condition 1 (response.ok):', response.ok);
      console.log('Condition 2 (status === 201):', response.status === 201);
      console.log('Final condition:', response.ok || response.status === 201);
      
      // Ki·ªÉm tra c·∫£ response.ok v√† status code
      if (response.ok || response.status === 201) {
        console.log('‚úÖ Registration successful, data:', data);
        
        // Ki·ªÉm tra n·∫øu c√≥ user object ho·∫∑c requiresVerification
        if (data.user || data.requiresVerification) {
          console.log('‚úÖ Has user or requiresVerification');
          const userData = data.user || { id: data.userId || data.id, email: formData.email };
          console.log('‚úÖ User data:', userData);
          setRegisteredUser(userData);
          
          console.log('‚úÖ About to show success alert');
          try {
            Alert.alert(
              'ƒêƒÉng k√Ω th√†nh c√¥ng!',
              'M√£ x√°c th·ª±c OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Sau khi x√°c th·ª±c, h·ªì s∆° c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin ƒë·ªÉ x√©t duy·ªát.',
              [
                {
                  text: 'X√°c th·ª±c ngay',
                  onPress: () => {
                    console.log('‚úÖ Setting showOTP to true, registeredUser:', userData);
                    setShowOTP(true);
                  },
                },
              ]
            );
            console.log('‚úÖ Success alert shown');
          } catch (error) {
            console.error('‚ùå Error showing alert:', error);
          }
        } else {
          console.log('‚ùå No user or requiresVerification');
          // N·∫øu kh√¥ng c√≥ user ho·∫∑c requiresVerification, coi nh∆∞ l·ªói
          Alert.alert('L·ªói', 'ƒêƒÉng k√Ω th√†nh c√¥ng nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng tin x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.');
        }
      } else {
        console.log('‚ùå Registration failed - response not ok and status not 201');
        if (data.message?.includes('Google account')) {
          Alert.alert(
            'Email ƒë√£ t·ªìn t·∫°i',
            'Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng v·ªõi t√†i kho·∫£n Google. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng Google.',
            [{ text: 'OK' }]
          );
        } else if (data.message?.includes('SMS account')) {
          Alert.alert(
            'Email ƒë√£ t·ªìn t·∫°i',
            'Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng v·ªõi t√†i kho·∫£n SMS. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng SMS.',
            [{ text: 'OK' }]
          );
        } else if (data.message?.includes('Email already exists')) {
          Alert.alert(
            'Email ƒë√£ t·ªìn t·∫°i',
            'Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ƒëƒÉng nh·∫≠p ho·∫∑c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.',
            [{ text: 'OK' }]
          );
        } else {
          Alert.alert('L·ªói', data.message || 'Kh√¥ng th·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i.');
        }
      }
    } catch (error) {
      console.error('Registration error:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.');
    } finally {
      setIsLoading(false);
    }
  };



  const handleVerificationSuccess = (userData: any) => {
    setShowOTP(false);
    
    Alert.alert(
      'X√°c th·ª±c th√†nh c√¥ng!',
      'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c. H·ªì s∆° ƒëƒÉng k√Ω l√†m shipper ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin ƒë·ªÉ x√©t duy·ªát. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ƒë∆∞·ª£c ch·∫•p thu·∫≠n.',
              [
          {
            text: 'ƒêƒÉng nh·∫≠p ngay',
            onPress: () => router.push('/login'),
          },
          {
            text: 'ƒê√≥ng',
            style: 'cancel',
          },
        ]
    );
  };

  const handleSendOTP = async () => {
    try {
      const response = await fetch('https://server-shelf-stacker-w1ds.onrender.com/auth/send-otp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email: formData.email.toLowerCase() }),
      });

      const data = await response.json();

      if (response.ok) {
        Alert.alert('Th√†nh c√¥ng', 'M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n');
      } else {
        throw new Error(data.message || 'Kh√¥ng th·ªÉ g·ª≠i OTP');
      }
    } catch (error: any) {
      throw error;
    }
  };

  const handleVerifyOTP = async (otp: string) => {
    try {
      console.log('üîç === DEBUG VERIFY OTP API ===');
      console.log('üîç Calling API:', 'https://server-shelf-stacker-w1ds.onrender.com/api/users/verify-email-otp');
      console.log('üîç Request body:', { email: formData.email.toLowerCase(), otp: otp, password: '***' });

      const response = await fetch('https://server-shelf-stacker-w1ds.onrender.com/api/users/verify-email-otp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email.toLowerCase(),
          otp: otp,
          password: formData.password, // Th√™m password theo y√™u c·∫ßu backend
        }),
      });

      console.log('üîç Response status:', response.status);
      console.log('üîç Response ok:', response.ok);
      console.log('üîç Response headers:', Object.fromEntries(response.headers.entries()));

      // Ki·ªÉm tra content-type tr∆∞·ªõc khi parse JSON
      const contentType = response.headers.get('content-type');
      console.log('üîç Content-Type:', contentType);

      if (!contentType || !contentType.includes('application/json')) {
        // N·∫øu kh√¥ng ph·∫£i JSON, ƒë·ªçc text ƒë·ªÉ debug
        const textResponse = await response.text();
        console.error('‚ùå Non-JSON response received:');
        console.error('‚ùå Status:', response.status);
        console.error('‚ùå Content-Type:', contentType);
        console.error('‚ùå Response text:', textResponse);
        throw new Error(`Server tr·∫£ v·ªÅ response kh√¥ng ph·∫£i JSON. Status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ JSON response parsed successfully:', data);

      if (response.ok && data.success) {
        console.log('‚úÖ OTP verification successful');
        return data;
      } else {
        console.log('‚ùå OTP verification failed:', data.message);
        throw new Error(data.message || 'M√£ OTP kh√¥ng ƒë√∫ng');
      }
    } catch (error: any) {
      console.error('‚ùå Error in handleVerifyOTP:', error);
      if (error.name === 'SyntaxError') {
        console.error('‚ùå JSON Parse Error - Server returned non-JSON response');
        throw new Error('L·ªói k·∫øt n·ªëi server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
      throw error;
    }
  };

  if (showOTP && registeredUser) {
    return (
      <EmailOTPVerification
        email={formData.email}
        onVerificationSuccess={handleVerificationSuccess}
        onBack={() => setShowOTP(false)}
        type="registration"
        onResendOTP={handleSendOTP}
        onVerifyOTP={handleVerifyOTP}
      />
    );
  }

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <LinearGradient
        colors={['#667eea', '#764ba2']}
        style={styles.gradient}
      >
        <ScrollView contentContainerStyle={styles.scrollContent}>
          {/* Header */}
          <View style={styles.header}>
            <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
              <Ionicons name="arrow-back" size={24} color="#fff" />
            </TouchableOpacity>
            <View style={styles.placeholder} />
            <View style={styles.placeholder} />
          </View>

          {/* Main Content */}
          <View style={styles.mainContent}>
            <View style={styles.logoContainer}>
              <Image
                source={require('../assets/images/ShelfStackerDelivery.png')}
                style={styles.logoImage}
                resizeMode="contain"
              />
            </View>

            <Text style={styles.title}>ƒêƒÉng k√Ω t√†i kho·∫£n Shipper</Text>
            <Text style={styles.description}>
              ƒêi·ªÅn th√¥ng tin ƒë·ªÉ ƒëƒÉng k√Ω l√†m shipper
            </Text>

            {/* Registration Form */}
            <View style={styles.form}>
              {/* Email */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Email *</Text>
                <View style={styles.inputWrapper}>
                  <Ionicons name="mail-outline" size={20} color="#666" />
                  <TextInput
                    style={styles.input}
                    value={formData.email}
                    onChangeText={(value) => handleChange('email', value)}
                    placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                    keyboardType="email-address"
                    autoCapitalize="none"
                    autoCorrect={false}
                  />
                </View>
                {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}
              </View>

              {/* Password */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>M·∫≠t kh·∫©u *</Text>
                <View style={styles.inputWrapper}>
                  <Ionicons name="lock-closed-outline" size={20} color="#666" />
                  <TextInput
                    style={styles.input}
                    value={formData.password}
                    onChangeText={(value) => handleChange('password', value)}
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                    secureTextEntry
                    autoCapitalize="none"
                  />
                </View>
                {errors.password && <Text style={styles.errorText}>{errors.password}</Text>}
              </View>

              {/* Confirm Password */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>X√°c nh·∫≠n m·∫≠t kh·∫©u *</Text>
                <View style={styles.inputWrapper}>
                  <Ionicons name="lock-closed-outline" size={20} color="#666" />
                  <TextInput
                    style={styles.input}
                    value={formData.confirmPassword}
                    onChangeText={(value) => handleChange('confirmPassword', value)}
                    placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                    secureTextEntry
                    autoCapitalize="none"
                  />
                </View>
                {errors.confirmPassword && <Text style={styles.errorText}>{errors.confirmPassword}</Text>}
              </View>

              {/* Full Name */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>H·ªç t√™n *</Text>
                <View style={styles.inputWrapper}>
                  <Ionicons name="person-outline" size={20} color="#666" />
                  <TextInput
                    style={styles.input}
                    value={formData.full_name}
                    onChangeText={(value) => handleChange('full_name', value)}
                    placeholder="Nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß"
                    autoCapitalize="words"
                  />
                </View>
                {errors.full_name && <Text style={styles.errorText}>{errors.full_name}</Text>}
              </View>

              {/* Phone Number */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>S·ªë ƒëi·ªán tho·∫°i *</Text>
                <View style={styles.inputWrapper}>
                  <Ionicons name="call-outline" size={20} color="#666" />
                  <TextInput
                    style={styles.input}
                    value={formData.phone_number}
                    onChangeText={(value) => handleChange('phone_number', value)}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    keyboardType="phone-pad"
                  />
                </View>
                {errors.phone_number && <Text style={styles.errorText}>{errors.phone_number}</Text>}
              </View>

              {/* Register Button */}
              <TouchableOpacity
                style={[
                  styles.registerButton,
                  isLoading && styles.registerButtonDisabled
                ]}
                onPress={handleRegister}
                disabled={isLoading}
              >
                {isLoading ? (
                  <ActivityIndicator size="small" color="#fff" />
                ) : (
                  <>
                    <Ionicons name="person-add" size={20} color="#fff" />
                    <Text style={styles.registerButtonText}>
                      ƒêƒÉng k√Ω
                    </Text>
                  </>
                )}
              </TouchableOpacity>

              {/* Login Link */}
              <View style={styles.loginContainer}>
                <Text style={styles.loginText}>
                  ƒê√£ c√≥ t√†i kho·∫£n?
                </Text>
                <TouchableOpacity onPress={() => router.push('/login')}>
                  <Text style={styles.loginLink}>
                    ƒêƒÉng nh·∫≠p ngay
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </ScrollView>
      </LinearGradient>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  gradient: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    paddingHorizontal: 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingTop: 40,
    paddingBottom: 20,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#fff',
  },
  placeholder: {
    width: 40,
  },
  mainContent: {
    flex: 1,
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 20,
  },
  logoImage: {
    width: 120,
    height: 120,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
    textAlign: 'center',
    marginBottom: 12,
  },
  description: {
    fontSize: 16,
    color: 'rgba(255, 255, 255, 0.8)',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 30,
    paddingHorizontal: 20,
  },
  form: {
    width: '100%',
  },
  inputContainer: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 16,
    color: '#fff',
    marginBottom: 8,
    fontWeight: '500',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#fff',
    marginLeft: 12,
  },
  errorText: {
    color: '#ff6b6b',
    fontSize: 14,
    marginTop: 4,
  },
  registerButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 25,
    marginBottom: 20,
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  registerButtonDisabled: {
    backgroundColor: 'rgba(255, 255, 255, 0.5)',
  },
  registerButtonText: {
    color: '#667eea',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  loginContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 30,
  },
  loginText: {
    color: 'rgba(255, 255, 255, 0.8)',
    fontSize: 14,
    marginRight: 4,
  },
  loginLink: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
    textDecorationLine: 'underline',
  },
});
